syntax = "proto3";

package dotflik.protobuf;

import "dotflik/protobuf/pagination/pagination.proto";
import "dotflik/protobuf/resources/genre.proto";
import "dotflik/protobuf/resources/movie.proto";
import "dotflik/protobuf/resources/star.proto";

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

// Service for handling querying and updating movies
service MovieService {
  // Get the maximum number of movies the server can return in a request.
  // This number is applied globally to this service, unless a service
  // method specifies its own max number of movies to return
  rpc GetMaxPageSize (google.protobuf.Empty) returns (GetMaxPageSizeResponse);

  // List movies using pagination
  rpc ListMovies(dotflik.protobuf.pagination.PaginationRequest) returns (ListMoviesResponse);

  // List movies given a year range
  rpc ListMoviesByYear(ListMoviesByYearRequest) returns (ListMoviesByYearResponse);

  // Get a movie by its id
  rpc GetMovieById(GetMovieByIdRequest) returns (MovieAggregate);

  // Get a movie by its title
  rpc GetMovieByTitle(GetMovieByTitleRequest) returns (GetMovieByTitleResponse);  
}

// This message aggregates all the necessary information
// about a movie to send back to the client
message MovieAggregate {
  dotflik.protobuf.resources.Movie movie = 1; // The movie
  repeated dotflik.protobuf.resources.Genre genres = 2; // The genres associated with the movie
  repeated dotflik.protobuf.resources.Star stars = 3; // The stars associated with the movie
}

// The response of listing movies
message ListMoviesResponse {
  // List of movies 
  repeated dotflik.protobuf.resources.Movie movies = 1;

  // The respone containing information to
  // get the next results with pagination
  pagination.PaginationRespone pagination_response = 2;
}

// The respone to get the maximum page size
message GetMaxPageSizeResponse {
  int32 max_page_size = 1; // Maximum page size
}

// The request to get the movie by its id
message GetMovieByIdRequest {
  string id = 1; // Id of the movie
}

// The request to get the movie by its title
message GetMovieByTitleRequest {
  string title = 1; // Title of the movie
}

// The response to get the movie by its title
message GetMovieByTitleResponse {
  repeated MovieAggregate movies = 1; // List of movies that have the same title
}

// The request to list movies by a year range using pagination
message ListMoviesByYearRequest {
// The number of movies per page to request. The maximum number of movies 
  // to request is determined by the server. If the request number 
  // execeeds the maximum number OR the request number <= 0,
  // then at most maximum number of movies is returned
  int32 page_size = 1;

  // The page token to request the specific page. Empty token means
  // requesting the 1st page
  string page_token = 2;

  // From year
  int32 from = 3;

  // To year
  int32 to = 4;

  // Specify the sort order on the year column of the returned results
  enum SortYear {
    SORTYEAR_ASC = 0; // Tell service to return results sorted by year in ascending order
    SORTYEAR_DESC = 1; // Tell service to return results sorted by year in descending order
  }

  // The order to sort the results
  SortYear sort_year = 5;
}

// The response to get movies by year range using pagination
message ListMoviesByYearResponse {
  // List of movies 
  repeated dotflik.protobuf.resources.Movie movies = 1;

  // The next page token to use. Use this token to request the next
  // page of results. If it's empty then it means there is no more
  // movies to get
  string next_page_token = 2; 
}
