@page "/movies"
@using System.Collections.Generic;
@using Grpc.Core;
@inject MovieService.MovieServiceClient MovieService
@inject GenreService.GenreServiceClient GenreService

<h3>Movie</h3>

@if (m_errorOccurred)
{
  <Error></Error>
}
else
{
  @if (m_movieAggrs != null)
  {
    <select name="Number of movies" @onchange="PageSizeUpdateHandler">
      <option value="5">5</option>
      <option value="10">10</option>
      <option value="20">20</option>
      <option value="50">50</option>
    </select>

    <div class="card-columns">
      @foreach (var movieAggr in m_movieAggrs)
      {
      <div class="card" style="width: 17rem;">
        <img class="card-img-top" src="@GetBannerUrl(movieAggr.Movie)">

        <div class="card-body">
          <h3 class="card-title">@movieAggr.Movie.Title</h3>
          <h5 class="card-subtitle">@movieAggr.Movie.Year</h5>
        </div>

        @foreach (var genre in movieAggr.Genres)
        {
          <a href="#" class="badge badge-pill badge-primary" style="margin: 5px 5px;">@genre.Name</a>
        }

        <div class="card-footer">
          <small class="text-muted">
            <button class="btn btn-primary" @onclick="e => SelectMovie(movieAggr)"
                    data-toggle="modal" data-target="#@MovieModalId">
              More Info
            </button>
          </small>
        </div>

      </div>
      }
    </div>
  }
  else
  {
    <Loading></Loading>
  }
}

<MovieDetails Movie="@m_selectMovieAggr?.ToDomainAggregate()" MovieModalId="@MovieModalId" />

@code
{
  private const string MovieModalId = "movieModal";

  private bool m_errorOccurred;
  private List<MovieAggregate>? m_movieAggrs;
  private MovieAggregate? m_selectMovieAggr;

  protected async override Task OnInitializedAsync()
  {
    m_movieAggrs = new List<MovieAggregate>();

    var response = await GetMovies(5);
    if (response is not null)
    {
      m_movieAggrs.AddRange(response.Movies);
    }
    
    m_errorOccurred = response is null;
  }

  /// <summary>
  /// Get the banner url from <paramref name="movie"/>.
  /// If the banner url is empty, then use an unavailable
  /// banner url as the fallback url.
  /// </summary>
  /// <param name="movie">Movie object</param>
  /// <returns>Url to banner</returns>
  private static string GetBannerUrl(Movie movie)
  {
    const string unavailableBannerUrl = "http://www.interlog.com/~tfs/images/posters/TFSMoviePosterUnavailable.jpg";
    return string.IsNullOrWhiteSpace(movie.BannerUrl) ? unavailableBannerUrl : movie.BannerUrl;
  }

  private async Task PageSizeUpdateHandler(ChangeEventArgs events)
  {
    int.TryParse(events.Value?.ToString(), out int pageSize);
    var response = await GetMovies(pageSize);
    if (response is not null)
    {
      m_movieAggrs = new List<MovieAggregate>(response.Movies);
    }
  }

  private async Task<ListMoviesResponse?> GetMovies(int pageSize, string token = "")
  {
    try
    {
      var request = new PaginationRequest { PageSize = pageSize, PageToken = token };
      return await MovieService.ListMoviesAsync(request);
    }
    catch (RpcException ex)
    {
      Console.Error.WriteLine(ex.Message);
    }
    return null;
  }

  private void SelectMovie(MovieAggregate movieAggr)
  {
    m_selectMovieAggr = movieAggr;
  }

}
