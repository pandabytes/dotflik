@page "/"
@using System.Collections.Generic;
@using Grpc.Core;
@inject MovieService.MovieServiceClient MovieService

<h3>Main Page</h3>

@if (m_errorOccurred)
{
  <Error></Error>
}
else
{
  @if (m_movieAggrs != null)
  {
    <select name="Number of movies" @onchange="PageSizeUpdateHandler">
      <option value="5">5</option>
      <option value="10">10</option>
      <option value="20">20</option>
      <option value="50">50</option>
    </select>

    <div class="card-columns">
      @foreach (var movieAggr in m_movieAggrs)
      {
        <div class="card" style="width: 17rem;">
          <img class="card-img-top" src="@GetBannerUrl(movieAggr.Movie)">

          <div class="card-body">
            <h3 class="card-title">@movieAggr.Movie.Title</h3>
            <h5 class="card-subtitle">@movieAggr.Movie.Year</h5>
          </div>

          <div class="card-footer">
          <small class="text-muted">
            <button class="btn btn-primary">
              More Info
            </button>
          </small>
        </div>

        </div>
      }
    </div>
  }
  else
  {
    <Loading></Loading>
  }
}

@code 
{ 
  private bool m_errorOccurred;
  private List<MovieAggregate>? m_movieAggrs;

  protected async override Task OnInitializedAsync()
  {
    await GetMovies(5);
  }

  /// <summary>
  /// Get the banner url from <paramref name="movie"/>.
  /// If the banner url is empty, then use an unavailable
  /// banner url as the fallback url.
  /// </summary>
  /// <param name="movie">Movie object</param>
  /// <returns>Url to banner</returns>
  private string GetBannerUrl(Movie movie)
  {
    const string unavailableBannerUrl = "http://www.interlog.com/~tfs/images/posters/TFSMoviePosterUnavailable.jpg";
    return string.IsNullOrWhiteSpace(movie.BannerUrl) ? unavailableBannerUrl : movie.BannerUrl;
  }

  private async Task PageSizeUpdateHandler(ChangeEventArgs events)
  {
    int.TryParse(events.Value?.ToString(), out int pageSize);
    await GetMovies(pageSize);
  }

  private async Task GetMovies(int pageSize)
  {
    try
    {
      var request = new PaginationRequest { PageSize = pageSize };
      var response = await MovieService.ListMoviesAsync(request);

      m_movieAggrs = new List<MovieAggregate>();
      m_movieAggrs.AddRange(response.Movies);
      m_errorOccurred = false;
    }
    catch (Exception ex)
    {
      Console.WriteLine(ex.Message);
      m_errorOccurred = true;
    }
  }

}
