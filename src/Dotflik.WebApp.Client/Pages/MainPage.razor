@page "/"
@using System.Collections.Generic;
@inject MovieService.MovieServiceClient MovieService

<h3>Main Page</h3>

@if (m_movies != null)
{
  <select name="Number of movies" @onchange="PageSizeUpdateHandler">
    <option value="5">5</option>
    <option value="10">10</option>
    <option value="20">20</option>
    <option value="50">50</option>
  </select>

  <div class="card-columns">
    @foreach (var movie in m_movies)
    {
      <div class="card" style="width: 17rem;">
        <img class="card-img-top" src="@GetBannerUrl(movie)">

        <div class="card-body">
          <h3 class="card-title">@movie.Title</h3>
          <h5 class="card-subtitle">@movie.Year</h5>
        </div>

        <div class="card-footer">
        <small class="text-muted">
          <button class="btn btn-primary">
            More Info
          </button>
        </small>
      </div>

      </div>
    }
  </div>
}

@code 
{ 
  private int PageSize { get; set; }
  private List<Movie> m_movies;

  protected async override Task OnInitializedAsync()
  {
    var request = new PaginationRequest { PageSize = 5 };
    var response = await MovieService.ListMoviesAsync(request);

    m_movies = new List<Movie>();
    m_movies.AddRange(response.Movies);
  }

  /// <summary>
  /// Get the banner url from <paramref name="movie"/>.
  /// If the banner url is empty, then use an unavailable
  /// banner url as the fallback url.
  /// </summary>
  /// <param name="movie">Movie object</param>
  /// <returns>Url to banner</returns>
  private string GetBannerUrl(Movie movie)
  {
    const string unavailableBannerUrl = "http://www.interlog.com/~tfs/images/posters/TFSMoviePosterUnavailable.jpg";
    return string.IsNullOrWhiteSpace(movie.BannerUrl) ? unavailableBannerUrl : movie.BannerUrl;
  }

  private async Task PageSizeUpdateHandler(ChangeEventArgs events)
  {
    var pageSize = int.Parse(events.Value.ToString());
    var request = new PaginationRequest { PageSize = pageSize };
    var response = await MovieService.ListMoviesAsync(request);

    m_movies = new List<Movie>();
    m_movies.AddRange(response.Movies);
  }

}
